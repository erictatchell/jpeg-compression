package main

import (
	"fmt"
	"math"
	"testing"
)

var margin = 2.0 // idk yet

func withinMargin(a, b float64) bool {
	return math.Abs(a-b) < margin
}

func TestIDCT(t *testing.T) {
	block1 := [][]float64{
		{1261.999878, -87.685867, 4.747855, -6.844710, 3.895790, -1.435648, 2.651355, -1.021132},
		{-87.685814, 0.100018, -0.053493, 0.056377, -0.057190, 0.059246, -0.064629, 0.069940},
		{4.747869, -0.053493, 0.005131, -0.006413, 0.004805, -0.003532, 0.004461, -0.003800},
		{-6.844753, 0.056374, -0.006413, 0.007809, -0.006193, 0.004961, -0.006017, 0.005470},
		{3.895785, -0.057190, 0.004807, -0.006187, 0.004419, -0.002989, 0.003921, -0.003113},
		{-1.435644, 0.059238, -0.003536, 0.004959, -0.002995, 0.001348, -0.002207, 0.001151},
		{2.651352, -0.064636, 0.004463, -0.006014, 0.003921, -0.002209, 0.003181, -0.002135},
		{-1.021144, 0.069928, -0.003808, 0.005468, -0.003114, 0.001155, -0.002130, 0.000826},
	}

	expected := [][]float64{
		{128, 130, 135, 140, 145, 150, 155, 160},
		{130, 132, 137, 142, 147, 152, 157, 162},
		{135, 137, 142, 147, 152, 157, 162, 167},
		{140, 142, 147, 152, 157, 162, 167, 172},
		{145, 147, 152, 157, 162, 167, 172, 177},
		{150, 152, 157, 162, 167, 172, 177, 182},
		{155, 157, 162, 167, 172, 177, 182, 187},
		{160, 162, 167, 172, 177, 182, 187, 192},
	}

	result := IDCT(block1)

	for i := range expected {
		for j := range expected[i] {
			if !withinMargin(result[i][j], float64(expected[i][j])) {
				t.Errorf("IDCT mismatch at [%d][%d], got: %.6f, want: %.6f", i, j, result[i][j], expected[i][j])
			}
		}
	}
}

func TestDCT(t *testing.T) {
	block1 := [][]float64{
		{128, 130, 135, 140, 145, 150, 155, 160},
		{130, 132, 137, 142, 147, 152, 157, 162},
		{135, 137, 142, 147, 152, 157, 162, 167},
		{140, 142, 147, 152, 157, 162, 167, 172},
		{145, 147, 152, 157, 162, 167, 172, 177},
		{150, 152, 157, 162, 167, 172, 177, 182},
		{155, 157, 162, 167, 172, 177, 182, 187},
		{160, 162, 167, 172, 177, 182, 187, 192},
	}
	// geeks for geeks
	expected := [][]float64{
		{1261.999878, -87.685867, 4.747855, -6.844710, 3.895790, -1.435648, 2.651355, -1.021132},
		{-87.685814, 0.100018, -0.053493, 0.056377, -0.057190, 0.059246, -0.064629, 0.069940},
		{4.747869, -0.053493, 0.005131, -0.006413, 0.004805, -0.003532, 0.004461, -0.003800},
		{-6.844753, 0.056374, -0.006413, 0.007809, -0.006193, 0.004961, -0.006017, 0.005470},
		{3.895785, -0.057190, 0.004807, -0.006187, 0.004419, -0.002989, 0.003921, -0.003113},
		{-1.435644, 0.059238, -0.003536, 0.004959, -0.002995, 0.001348, -0.002207, 0.001151},
		{2.651352, -0.064636, 0.004463, -0.006014, 0.003921, -0.002209, 0.003181, -0.002135},
		{-1.021144, 0.069928, -0.003808, 0.005468, -0.003114, 0.001155, -0.002130, 0.000826},
	}
	result := DCT(&block1)

	for i := range expected {
		for j := range expected[i] {
			if !withinMargin(result[i][j], expected[i][j]) {
				t.Errorf("IDCT mismatch at [%d][%d], got: %.6f, want: %.6f", i, j, result[i][j], expected[i][j])
			}
		}
	}

}

func formatMatrix(float bool, m [][]float64) string {
	var s string
	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			if float {
				s += fmt.Sprintf("%.2f\t", m[i][j])
			} else {
				s += fmt.Sprintf("%d\t", int(m[i][j]))
			}
		}
		s += "\n"
	}
	return s
}
